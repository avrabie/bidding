/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package xyz.optimized.api;

import xyz.optimized.model.Product;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-08-18T20:27:08.112715361+02:00[Europe/Berlin]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    /**
     * POST /products : Create a Product
     * Creates a new instance of a &#x60;Product&#x60;.
     *
     * @param product A new &#x60;Product&#x60; to be created. (required)
     * @return Successful response. (status code 201)
     *         or Request did not pass validation (status code 400)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Create a Product",
        description = "Creates a new instance of a `Product`.",
        responses = {
            @ApiResponse(responseCode = "201", description = "Successful response."),
            @ApiResponse(responseCode = "400", description = "Request did not pass validation")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> _createProduct(
        @Parameter(name = "Product", description = "A new `Product` to be created.", required = true) @Valid @RequestBody Mono<Product> product,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return createProduct(product, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> createProduct(Mono<Product> product,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(product).then(Mono.empty());

    }


    /**
     * DELETE /products/{productId} : Delete a Product
     * Deletes an existing &#x60;Product&#x60;.
     *
     * @param productId A unique identifier for a &#x60;Product&#x60;. (required)
     * @return Successful response. (status code 204)
     */
    @Operation(
        operationId = "deleteProduct",
        summary = "Delete a Product",
        description = "Deletes an existing `Product`.",
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful response.")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{productId}"
    )
    
    default Mono<ResponseEntity<Void>> _deleteProduct(
        @Parameter(name = "productId", description = "A unique identifier for a `Product`.", required = true, in = ParameterIn.PATH) @PathVariable("productId") String productId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return deleteProduct(productId, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> deleteProduct(String productId,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /products/{productId} : Get a Product
     * Gets the details of a single instance of a &#x60;Product&#x60;.
     *
     * @param productId A unique identifier for a &#x60;Product&#x60;. (required)
     * @return Successful response - returns a single &#x60;Product&#x60;. (status code 200)
     *         or Product not found (status code 404)
     */
    @Operation(
        operationId = "getProduct",
        summary = "Get a Product",
        description = "Gets the details of a single instance of a `Product`.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response - returns a single `Product`.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Product.class))
            }),
            @ApiResponse(responseCode = "404", description = "Product not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{productId}",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Product>> _getProduct(
        @Parameter(name = "productId", description = "A unique identifier for a `Product`.", required = true, in = ParameterIn.PATH) @PathVariable("productId") String productId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getProduct(productId, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Product>> getProduct(String productId,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"product\" : { \"id\" : 9876, \"name\" : \"Vintage Camera\", \"description\" : \"A classic 1950s vintage camera in excellent condition, fully functional with a leather carrying case included.\", \"category\" : \"Electronics\", \"starting_price\" : { \"amount\" : 100, \"currency\" : \"USD\" }, \"current_bid\" : { \"amount\" : 150, \"currency\" : \"USD\", \"bidder\" : { \"id\" : 54321, \"name\" : \"Jane Smith\" } }, \"buy_now_price\" : { \"amount\" : 500, \"currency\" : \"USD\" }, \"minimum_increment\" : 10, \"image_urls\" : [ \"https://example.com/images/vintage_camera_front.jpg\", \"https://example.com/images/vintage_camera_back.jpg\", \"https://example.com/images/vintage_camera_side.jpg\" ], \"seller\" : { \"id\" : 67890, \"name\" : \"Vintage Store\", \"rating\" : 4.8, \"location\" : \"New York, USA\" }, \"auction_details\" : { \"start_time\" : \"2024-08-15T12:00:00Z\", \"end_time\" : \"2024-08-20T15:00:00Z\", \"status\" : \"active\" } } }";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * GET /products : List All Products
     * Gets a list of all &#x60;Product&#x60; entities.
     *
     * @return Successful response - returns an array of &#x60;Product&#x60; entities. (status code 200)
     */
    @Operation(
        operationId = "getProducts",
        summary = "List All Products",
        description = "Gets a list of all `Product` entities.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response - returns an array of `Product` entities.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Product.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    
    default Mono<ResponseEntity<Flux<Product>>> _getProducts(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getProducts(exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Flux<Product>>> getProducts( final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "[ { \"product\" : { \"id\" : 9876, \"name\" : \"Vintage Camera\", \"description\" : \"A classic 1950s vintage camera in excellent condition, fully functional with a leather carrying case included.\", \"category\" : \"Electronics\", \"starting_price\" : { \"amount\" : 100, \"currency\" : \"USD\" }, \"current_bid\" : { \"amount\" : 150, \"currency\" : \"USD\", \"bidder\" : { \"id\" : 54321, \"name\" : \"Jane Smith\" } }, \"buy_now_price\" : { \"amount\" : 500, \"currency\" : \"USD\" }, \"minimum_increment\" : 10, \"image_urls\" : [ \"https://example.com/images/vintage_camera_front.jpg\", \"https://example.com/images/vintage_camera_back.jpg\", \"https://example.com/images/vintage_camera_side.jpg\" ], \"seller\" : { \"id\" : 67890, \"name\" : \"Vintage Store\", \"rating\" : 4.8, \"location\" : \"New York, USA\" }, \"auction_details\" : { \"start_time\" : \"2024-08-15T12:00:00Z\", \"end_time\" : \"2024-08-20T15:00:00Z\", \"status\" : \"active\" } } }, { \"product\" : { \"id\" : 9876, \"name\" : \"Vintage Camera\", \"description\" : \"A classic 1950s vintage camera in excellent condition, fully functional with a leather carrying case included.\", \"category\" : \"Electronics\", \"starting_price\" : { \"amount\" : 100, \"currency\" : \"USD\" }, \"current_bid\" : { \"amount\" : 150, \"currency\" : \"USD\", \"bidder\" : { \"id\" : 54321, \"name\" : \"Jane Smith\" } }, \"buy_now_price\" : { \"amount\" : 500, \"currency\" : \"USD\" }, \"minimum_increment\" : 10, \"image_urls\" : [ \"https://example.com/images/vintage_camera_front.jpg\", \"https://example.com/images/vintage_camera_back.jpg\", \"https://example.com/images/vintage_camera_side.jpg\" ], \"seller\" : { \"id\" : 67890, \"name\" : \"Vintage Store\", \"rating\" : 4.8, \"location\" : \"New York, USA\" }, \"auction_details\" : { \"start_time\" : \"2024-08-15T12:00:00Z\", \"end_time\" : \"2024-08-20T15:00:00Z\", \"status\" : \"active\" } } } ]";
                result = ApiUtil.getExampleResponse(exchange, MediaType.valueOf("application/json"), exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * PUT /products/{productId} : Update a Product
     * Updates an existing &#x60;Product&#x60;.
     *
     * @param productId A unique identifier for a &#x60;Product&#x60;. (required)
     * @param product Updated &#x60;Product&#x60; information. (required)
     * @return Successful response. (status code 202)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update a Product",
        description = "Updates an existing `Product`.",
        responses = {
            @ApiResponse(responseCode = "202", description = "Successful response.")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/products/{productId}",
        consumes = { "application/json" }
    )
    
    default Mono<ResponseEntity<Void>> _updateProduct(
        @Parameter(name = "productId", description = "A unique identifier for a `Product`.", required = true, in = ParameterIn.PATH) @PathVariable("productId") String productId,
        @Parameter(name = "Product", description = "Updated `Product` information.", required = true) @Valid @RequestBody Mono<Product> product,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return updateProduct(productId, product, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> updateProduct(String productId, Mono<Product> product,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(product).then(Mono.empty());

    }

}
